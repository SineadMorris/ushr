"0","# define Mixed Effects formula for V(t)"
"0","get_model <- function(psi, id, x){"
"0","  A <- psi[id,1]"
"0","  B <- psi[id,2]"
"0","  delta <- psi[id,3]"
"0","  gamma<- psi[id,4]"
"0","  t <- x[,1]"
"0","  "
"0","  V <- A * exp( - delta * t) + B * exp ( - gamma * t)"
"0","  return(V)"
"0","}"
"0","do_filter <- function(data, detection_threshold = 100, censortime = 365, decline_buffer = 500, threshold_buffer = 10){"
"0","    filtered <- data %>% mutate(vl = case_when(vl <= detection_threshold ~ detection_threshold/2,"
"0","                                                    vl >= detection_threshold ~ vl) ) %>%"
"0","        # Look at only those who reach control within user defined censortime"
"0","        filter(time <= censortime) %>% group_by(id, simulation, type) %>% "
"0","        filter(any(vl <= detection_threshold)) %>% ungroup() %>%"
"0","        # Isolate data from the highest VL measurement (from points 1 - 3) to the first point below detection"
"0","        filter(!is.na(vl)) %>% group_by(id, simulation, type) %>%"
"0","        slice(which.max(vl[1:3]):Position(function(x) x <= detection_threshold, vl)) %>% ungroup() %>%"
"0","        # Only keep VL sequences that are decreasing with user defined buffer..."
"0","        group_by(id, simulation, type) %>% filter(all(vl <= cummin(vl) + decline_buffer)) %>% "
"0","        group_by(id, simulation, type) %>% "
"0","        mutate(n = n(), index = 1:n(), tag = ifelse(vl[n-1] - vl[n] < threshold_buffer, TRUE, FALSE) ) %>%"
"0","        filter(!(tag == TRUE & index == n)) %>% ungroup() %>% select(-index, -n, -tag)"
"0","    return(filtered)"
"0","}"
"0","fit_saemix <- function(data0, model = get_model){"
"0","    "
"0","    saemix_data <- saemixData(name.data = data0, name.group = ""id"", "
"0","                              name.predictors = ""time"", name.response = ""vl"","
"0","                              verbose = FALSE)"
"0","    # define starting guess"
"0","    guess0 <- c(A = 10000, B = 100, delta = 0.5, gamma = 0.01)"
"0","    "
"0","    # construct model"
"0","    saemix_model <- saemixModel(model = model, "
"0","                                psi0 = matrix(guess0, ncol = length(guess0), byrow = TRUE, "
"0","                                              dimnames = list(NULL, c(""A"", ""B"", ""delta"", ""gamma""))), "
"0","                                error.model = ""exponential"", transform.par = c(1,1,1,1),"
"0","                                verbose = FALSE)"
"0","    "
"0","    # fit model"
"0","    saemix.options <- list(map = TRUE, fim = TRUE, ll.is = FALSE, "
"0","                           displayProgress = FALSE, seed = 1234567,"
"0","                           print = FALSE, warnings = FALSE,"
"0","                           save = FALSE, save.graphs = FALSE)"
"0","    saemix_fit <- saemix(saemix_model, saemix_data, saemix.options)"
"0","    "
"0","    # get parameters for each individual"
"0","    idpar <- psi(saemix_fit) %>%"
"0","        mutate(simulation = data0$simulation[1], type = data0$type[1])"
"0","    "
"0","    # get population-level parameters"
"0","    poppar <- coef(saemix_fit)$fixed"
"0","    "
"0","    popse <- saemix_fit[""results""][""se.fixed""]"
"0","    "
"0","    popCI <- data.frame(param = names(poppar), estimate = signif(poppar, 3), "
"0","                        highCI = signif(poppar + 1.96 * popse,3), lowCI = signif(poppar - 1.96 * popse,3), "
"0","                        row.names = NULL,stringsAsFactors = FALSE )  %>%"
"0","      rbind(., c(""1/delta"", signif(1/as.numeric(.[3,c(2,4,3)]),3)), "
"0","            c(""1/gamma"", signif(1/as.numeric(.[4,c(2,4,3)]),3) ) ) %>%"
"0","        mutate(simulation = data0$simulation[1], type = data0$type[1])"
"0","    "
"0","    fits <- fitted(saemix_fit)"
"0","    "
"0","    if (length(fits > 0)){"
"0","        fits <- data0 %>% mutate(fit = fits)"
"0","    } else{"
"0","        fits <- data0 %>% mutate(fit = NA)"
"0","    }"
"0","    return(list(popCI = popCI, idpar = idpar, results = saemix_fit@results, fits = fits))"
"0","}"
