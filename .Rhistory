legend.spacing.y = unit(0.01, "cm"),
legend.key.height = unit(0.4, "cm"),
legend.key.width = unit(0.25, "cm"))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ybreaks <- c(1e2, 1e3, 1e4, 1e5, 1e6)
ylabels <- expression(10^2, 10^3, 10^4, 10^5, 10^6)
## Load saemix parameters ------------------------------------------------------------------------------------
lazyLoad("../BMC/Rcode/MixedEffects2_cache/latex/fitsaemix_bb3c5b41a64cadc66d2a425dbebe2117")
load("../BMC/Rcode/Processed/Exploratory2data.RData")
lazyLoad("../BMC/Rcode/MixedEffects2_cache/latex/filterdata_c7acaaac90402dd254a223a774c09fb5")
dataAll <- bind_rows(datalist)
allvals <- dataAll %>%
distinct(id, A, delta, B, gamma, type, simulation) %>%
mutate(shortlifespan = 1/delta, longlifespan = 1/gamma,
logA = log10(A), logB = log10(B)) %>%
gather(param, true, A:gamma, shortlifespan:logB) %>%
group_by(simulation, type, param) %>% summarize(true = mean(true)) %>%
ungroup()
saemixvals <- bind_rows(poplist) %>% select(-highCI, -lowCI) %>%
mutate(estimate = as.numeric(estimate),
param = ifelse(param == "1/delta", "shortlifespan", param),
param = ifelse(param == "1/gamma", "longlifespan", param)) %>%
left_join(allvals) %>% mutate(analysis = "NLME")
worst <- saemixvals %>% filter(param == "shortlifespan", type == "low") %>% arrange(desc(true)) %>% head()
good <-  saemixvals %>% filter(param == "shortlifespan", type == "low") %>% arrange(true) %>% head()
indworst <- bind_rows(idlist) %>% filter(simulation %in% worst$simulation[1], type == "low")
allvals %>% filter(simulation %in% worst$simulation[1], type == "low")
lazyLoad("../BMC/Rcode/MixedEffects2_cache/latex/comparesaemix_0580275c183eecc70c59a5f5b5212efd")
colour_index6 <- c(3,8)
compareAll %>%
filter(param %in% c("shortlifespan", "longlifespan"), type == "low",
simulation %in% c(good$simulation, worst$simulation), analysis == "NLME") %>%
mutate(performance = ifelse(simulation %in% worst$simulation, "bad", "good")) %>%
ggplot() +
geom_text(aes(x = true, y = estimate, label = simulation, colour = performance),
size = 6) +
geom_abline(aes(intercept = 0, slope = 1), linetype = "dashed") +
mytheme + facet_wrap(~param, scales = "free") +
ylab("Estimate (fitted subset)") + xlab("True (all subjects)") +
scale_colour_manual(guide = FALSE, values = c("darkred", "forestgreen")) +
#theme(legend.position = c(0.88, 0.93)) +
guides(color = guide_legend(override.aes = list(alpha = 1, size = basepoint + 0.5)))
require(tidyverse)
require(readxl)
studydata <- read_excel("/Users/sineadmorris/Dropbox/Postdoc/HIVneonates/January19/Data/followup20190110.xlsx", na=".")
studydata <- studydata %>% select(id = studyid, vl = child_vl, time = age)
#detection_threshold = 20
censortime = 365
decline_buffer = 500
threshold_buffer = 10
VL_max_decline = 1e4
CI_max_diff = 1e3
n_min_single = 3
n_min_biphasic = 6
# forward_param_transform_fn = list(log, log, log, log)
# inv_param_transform_fn = list(exp, exp, exp, exp)
#
# initial_params = c(A = 10000, delta = 0.68, B = 1000, gamma = 0.03)
# searchmethod = "Nelder-Mead"
# metric = "ProfileLogLikelihood"
# weights = NULL
## Test with our data ---------------------------------
test <- mash(data = studydata)
model_output <- test
plot_model(model_output)
names(summarize_model(model_output))
names(summarize_model(model_output, data = study_data))
names(summarize_model(model_output, data = studydata))
summarize_model(model_output, data = studydata)
summarize_model(model_output, data = studydata)$allinfo
?get_TTS
1/0.03
1/0-.05
1/0.05
?uniroot
?get_parametricTTS
require(dplyr)
require(tidyr)
require(ggplot2)
require(mashr)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = FALSE)
basetext <- 10
basepoint <- 2
baseline <- 1
mytheme <- theme_bw() + theme(axis.text = element_text(size = basetext), axis.title = element_text(size = basetext + 1),
legend.text = element_text(size = basetext), legend.title = element_text(size = basetext + 1),
strip.text.x = element_text(size = basetext + 1))
simulate_studies <- function(nsubjects, detection_threshold, simulation, mean_params){
# 1. simulate data
data0 <- simulate_data(nsubjects = nsubjects,
detection_threshold = detection_threshold,
min_datapoints = 6, max_datapoints = 24,
mean_params = mean_params) %>%
mutate(type = "intermediate")
data_fine <- simulate_data(nsubjects = nsubjects,
detection_threshold = detection_threshold,
min_datapoints = 12, max_datapoints = 48,
mean_params = mean_params) %>%
mutate(type = "high")
data_low <- simulate_data(nsubjects = nsubjects,
detection_threshold = detection_threshold,
min_datapoints = 3, max_datapoints = 12,
mean_params = mean_params) %>%
mutate(type = "low")
# 2. fit model
model0 <- mash(data = data0, detection_threshold = detection_threshold)
model_fine <- mash(data = data_fine, detection_threshold = detection_threshold)
model_low <- mash(data = data_low, detection_threshold = detection_threshold)
# 3. get TTS estimates
TTS0 <- get_TTS(model_output = model0,
suppression_threshold = detection_threshold, parametric = TRUE) %>%
filter(model == "biphasic") %>%
select(id, TTS) %>% mutate(type = "intermediate")
TTS_fine <- get_TTS(model_output = model_fine,
suppression_threshold = detection_threshold, parametric = TRUE) %>%
filter(model == "biphasic") %>%
select(id, TTS) %>% mutate(type = "high")
TTS_low <- get_TTS(model_output = model_low,
suppression_threshold = detection_threshold, parametric = TRUE) %>%
filter(model == "biphasic") %>%
select(id, TTS) %>% mutate(type = "low")
# 4. get biphasic CIs
biphasicCI0 <- model0$biphasicCI %>% mutate(type = "intermediate")
biphasic_fine <- model_fine$biphasicCI %>% mutate(type = "high")
biphasic_low <- model_low$biphasicCI %>% mutate(type = "low")
# 5. get true parameter values
true <- data0 %>% filter(id %in% biphasicCI0$id) %>%
distinct(id, A, delta, B, gamma, type) %>%
mutate(TTS = get_parametricTTS(params = ., rootfunction = biphasic_root,
suppression_threshold = detection_threshold,
uppertime = 365),
model = "biphasic", calculation = "parametric")
true_fine <- data_fine %>% filter(id %in% biphasic_fine$id) %>%
distinct(id, A, delta, B, gamma, type) %>%
mutate(TTS = get_parametricTTS(params = ., rootfunction = biphasic_root,
suppression_threshold = detection_threshold,
uppertime = 365),
model = "biphasic", calculation = "parametric")
true_low <-  data_low %>% filter(id %in% biphasic_low$id) %>%
distinct(id, A, delta, B, gamma, type) %>%
mutate(TTS = get_parametricTTS(params = ., rootfunction = biphasic_root,
suppression_threshold = detection_threshold,
uppertime = 365),
model = "biphasic", calculation = "parametric")
# 6. collect results
data_all <- rbind(data0, data_fine, data_low) %>%
mutate(simulation = simulation)
true_all <- rbind(true, true_fine, true_low) %>%
mutate(shortlifespan = 1/delta, longlifespan = 1/gamma,
logA = log10(A), logB = log10(B)) %>%
gather(param, true, A:gamma, shortlifespan:logB, TTS) %>%
mutate(simulation = simulation)
TTS_all <- rbind(TTS0, TTS_fine, TTS_low)
biphasic_all <- rbind(biphasicCI0, biphasic_fine, biphasic_low) %>%
mutate(simulation = simulation) %>%
distinct(id, param, estimate, type, simulation) %>%
spread(param, estimate) %>%
mutate(shortlifespan = 1/delta, longlifespan = 1/gamma,
logA = log10(A), logB = log10(B)) %>%
left_join(TTS_all) %>%
gather(param, estimate, A:logB, TTS)
# 7. get deviation scores
stats <- biphasic_all  %>%
left_join(true_all) %>%
group_by(type, param) %>% mutate(n = n()) %>%
mutate(deviation = (true - estimate)/true) %>%
summarize(deviation = sum(deviation)/unique(n)) %>% ungroup() %>%
arrange(desc(abs(deviation))) %>% mutate(simulation = simulation)
return(list(data = data_all, biphasic_all = biphasic_all, stats = stats))
}
set.seed(1234567)
detection_threshold <- 100
nsubjects <- 200
nreps <- 2
param_max <- c(A = 2e5, delta = 0.5, B = 1e4, gamma = 0.05)
param_min <- c(A = 5e4, delta = 0.2, B = 5e3, gamma = 0.03)
paramset <- runif(n = length(param_max) * nreps,
min = param_min, max = param_max) %>%
matrix(., byrow = TRUE, nrow = nreps)
colnames(paramset) <- names(param_max)
statslist <- vector("list", nreps)
datalist <- vector("list", nreps)
bplist <- vector("list", nreps)
for (i in 1:nreps) {
tmp <- simulate_studies(nsubjects, detection_threshold,
simulation = i, mean_params = paramset[i,])
statslist[[i]] <- tmp$stats
datalist[[i]] <- tmp$data
bplist[[i]] <- tmp$biphasic_all
}
?get_parametricTTS
simulate_data()
get_parametricTTS()
filter_dataTTS
get_parametricTTS
get_nonparametricTTS
get_biphasicroot
biphasic_root
library(mashr)
biphasic_root
get_parametricTTS
a <- list()
b <- list()
c <- list()
a[[1]] <- list(x = 1, y = 2)
a[[2]] <- list(x = c(1,2), y = c(3,4,5))
a
bind_rows(a)
a[[1]] <- list(x = 1, y = c(1,2, 3))
bind_rows(a)
a
a[[1]] <- list(x = c(5,1), y = c(1,2, 3))
bind_rows(a)
a
bind_rows(a$x)
a[[1]] <- list(first = data.frame(x = c(5,1), y = c(1,2, 3), second =  data.frame(z = c(5,1), zz = c(1,2, 3))
)
)
a[[1]] <- list(first = data.frame(x = c(5,1), y = c(1,2, 3)), second =  data.frame(z = c(5,1), zz = c(1,2, 3)) )
list(first = data.frame(x = c(5,1), y = c(1,2, 3)), second =  data.frame(z = c(5,1), zz = c(1,2, 3)) )
list(first = data.frame(x = c(5,1,1), y = c(1,2, 3)), second =  data.frame(z = c(5,1), zz = c(1,2)) )
a[[1]] <- list(first = data.frame(x = c(5,1,1), y = c(1,2, 3)), second =  data.frame(z = c(5,1), zz = c(1,2)) )
a[[2]] <- list(first = data.frame(x = c(9,9,1), y = c(1,0, 0)), second =  data.frame(z = c(0,0), zz = c(0,2)) )
a
bind_rows(a$second)
bind_rows(a$first)
bind_rows(a)
bind_rows(a["first"])
bind_rows(a[["first"]])
lapply(a, bind_rows)
lapply(a, lapply(x, bind_rows))
lapply(a, function(x) lapply(x, bind_rows))
lapply(a, bind_rows)
a %>%
map(as.data.frame) %>%
bind_rows()
require(tidyverse)
a %>%
map(as.data.frame) %>%
bind_rows()
a %>%
bind_rows()
a %>%
map(as.data.frame) %>%
bind_rows()
a %>%
map(as.data.frame) %>%
bind_rows()
a %>%
map(as.data.frame) %>%map(~ select(.x, first)) %>%
bind_rows()
a %>%
map(as.data.frame) %>%map(~ select(., first)) %>%
bind_rows()
a %>%
map(flatten) %>%
bind_rows()
flatten(A)
flatten(a)
flatten(a)$first
flatten(a) %>% bind_rows()
unlist(a)
unnest(a)
a %>% tibble()
lapply(a, funciton(x) bind_rows(x.$first))
lapply(a, function(x) bind_rows(x.$first))
lapply(a, function(x) bind_rows(x))
lapply(a, funciton(x) x$first)
lapply(a, function(x) x$first)
a
lapply(a, function(x) x$first) %>% bind_rows()
a[[1]]
a[[2]]
lapply(a, $first) %>% bind_rows()
require(dplyr)
require(tidyr)
require(ggplot2)
require(mashr)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = FALSE)
basetext <- 10
basepoint <- 2
baseline <- 1
mytheme <- theme_bw() + theme(axis.text = element_text(size = basetext), axis.title = element_text(size = basetext + 1),
legend.text = element_text(size = basetext), legend.title = element_text(size = basetext + 1),
strip.text.x = element_text(size = basetext + 1))
require(parallel)
output <- mcapply(1:nreps, simulate_studies, detection_threshold,
simulation = i, mean_params = paramset[i,])
output <- mclapply(1:nreps, simulate_studies, detection_threshold,
simulation = i, mean_params = paramset[i,])
ncores = 2
output <- mclapply(1:nreps, simulate_studies, detection_threshold,
simulation = i, mean_params = paramset[i,],
mc.cores = ncores)
output
mclapply(1:nreps, simulate_studies, nsubjects, detection_threshold,
simulation = i, mean_params = paramset[i,],
mc.cores = ncores)
mclapply(i = 1:nreps, simulate_studies, nsubjects, detection_threshold,
simulation = i, mean_params = paramset[i,],
mc.cores = ncores)
simulate_studies <- function(simulation, nsubjects, detection_threshold, mean_params){
# 1. simulate data for 3 resolutions: low, intermediate (0), and high
data0 <- simulate_data(nsubjects = nsubjects,
detection_threshold = detection_threshold,
min_datapoints = 6, max_datapoints = 24,
mean_params = mean_params) %>%
mutate(type = "intermediate")
data_fine <- simulate_data(nsubjects = nsubjects,
detection_threshold = detection_threshold,
min_datapoints = 12, max_datapoints = 48,
mean_params = mean_params) %>%
mutate(type = "high")
data_low <- simulate_data(nsubjects = nsubjects,
detection_threshold = detection_threshold,
min_datapoints = 3, max_datapoints = 12,
mean_params = mean_params) %>%
mutate(type = "low")
# 2. fit model to each dataset
model0 <- mash(data = data0, detection_threshold = detection_threshold)
model_fine <- mash(data = data_fine, detection_threshold = detection_threshold)
model_low <- mash(data = data_low, detection_threshold = detection_threshold)
# 3. get TTS estimates
TTS0 <- get_TTS(model_output = model0,
suppression_threshold = detection_threshold, parametric = TRUE) %>%
filter(model == "biphasic") %>%
select(id, TTS) %>% mutate(type = "intermediate")
TTS_fine <- get_TTS(model_output = model_fine,
suppression_threshold = detection_threshold, parametric = TRUE) %>%
filter(model == "biphasic") %>%
select(id, TTS) %>% mutate(type = "high")
TTS_low <- get_TTS(model_output = model_low,
suppression_threshold = detection_threshold, parametric = TRUE) %>%
filter(model == "biphasic") %>%
select(id, TTS) %>% mutate(type = "low")
# 4. get biphasic CIs
biphasicCI0 <- model0$biphasicCI %>% mutate(type = "intermediate")
biphasic_fine <- model_fine$biphasicCI %>% mutate(type = "high")
biphasic_low <- model_low$biphasicCI %>% mutate(type = "low")
# 5. get true parameter values for subjects fit with the biphasic model
true0 <- data0 %>% filter(id %in% biphasicCI0$id) %>%
distinct(id, A, delta, B, gamma, type) %>%
mutate(TTS = get_parametricTTS(params = ., rootfunction = biphasic_root,
suppression_threshold = detection_threshold,
uppertime = 365),
model = "biphasic", calculation = "parametric")
true_fine <- data_fine %>% filter(id %in% biphasic_fine$id) %>%
distinct(id, A, delta, B, gamma, type) %>%
mutate(TTS = get_parametricTTS(params = ., rootfunction = biphasic_root,
suppression_threshold = detection_threshold,
uppertime = 365),
model = "biphasic", calculation = "parametric")
true_low <-  data_low %>% filter(id %in% biphasic_low$id) %>%
distinct(id, A, delta, B, gamma, type) %>%
mutate(TTS = get_parametricTTS(params = ., rootfunction = biphasic_root,
suppression_threshold = detection_threshold,
uppertime = 365),
model = "biphasic", calculation = "parametric")
# 6. collect results
data_all <- rbind(data0, data_fine, data_low) %>%
mutate(simulation = simulation)
true_all <- rbind(true0, true_fine, true_low) %>%
mutate(shortlifespan = 1/delta, longlifespan = 1/gamma,
logA = log10(A), logB = log10(B)) %>%
gather(param, true, A:gamma, shortlifespan:logB, TTS) %>%
mutate(simulation = simulation)
TTS_all <- rbind(TTS0, TTS_fine, TTS_low)
biphasic_all <- rbind(biphasicCI0, biphasic_fine, biphasic_low) %>%
mutate(simulation = simulation) %>%
distinct(id, param, estimate, type, simulation) %>%
spread(param, estimate) %>%
mutate(shortlifespan = 1/delta, longlifespan = 1/gamma,
logA = log10(A), logB = log10(B)) %>%
left_join(TTS_all) %>%
gather(param, estimate, A:logB, TTS)
# 7. get deviation scores
stats <- biphasic_all  %>%
left_join(true_all) %>%
group_by(type, param) %>% mutate(n = n()) %>%
mutate(deviation = (true - estimate)/true) %>%
summarize(deviation = sum(deviation)/unique(n)) %>% ungroup() %>%
arrange(desc(abs(deviation))) %>% mutate(simulation = simulation)
return(list(data = data_all, biphasic_all = biphasic_all, stats = stats))
}
mclapply(i = 1:nreps, simulate_studies, nsubjects, detection_threshold,
mean_params = paramset[i,], mc.cores = ncores)
mclapply(1:nreps, simulate_studies, nsubjects, detection_threshold,
mean_params = paramset[i,], mc.cores = ncores)
library(mashr)
library(mashr)
library(mashr)
require(dplyr)
require(tidyr)
require(ggplot2)
require(mashr)
knitr::opts_chunk$set(echo = TRUE, fig.height = 6, fig.width = 8, message = FALSE, warning = FALSE)
print(head(actg315raw))
str(data)
str(actg315raw)
library(mashr)
actg315raw dplyr::%>%
#'     mutate(vl = 10^log10.RNA.) %>%
#'     select(id = Patid, time = Day, vl)
library(mashr)
?actg315raw
library(mashr)
?actg315raw
library(mashr)
simulate_data(nsubjects = 20)
?actg315raw
library(mashr)
library(mashr)
library(mashr)
library(mashr)
available::available("mimic")
?available
available::available("mime", browse = FALSE)
available::available("hame", browse = FALSE)
available::available("warmth", browse = FALSE)
available::available("charms", browse = FALSE)
available::available("waft", browse = FALSE)
available::available("tusk", browse = FALSE)
library(mashr)
?actg315raw
library(mashr)
?actg315raw
?actg315raw
library(mashr)
available::available("ask", browse = FALSE)
available::available("martha", browse = FALSE)
library(mashr)
library(mashr)
require(tidyverse)
require(readxl)
studydata <- read_excel("/Users/sineadmorris/Dropbox/Postdoc/HIVneonates/January19/Data/followup20190110.xlsx", na=".")
studydata <- studydata %>% select(id = studyid, vl = child_vl, time = age)
#detection_threshold = 20
censortime = 365
decline_buffer = 500
threshold_buffer = 10
VL_max_decline = 1e4
CI_max_diff = 1e3
n_min_single = 3
n_min_biphasic = 6
# forward_param_transform_fn = list(log, log, log, log)
# inv_param_transform_fn = list(exp, exp, exp, exp)
#
# initial_params = c(A = 10000, delta = 0.68, B = 1000, gamma = 0.03)
# searchmethod = "Nelder-Mead"
# metric = "ProfileLogLikelihood"
# weights = NULL
## Test with our data ---------------------------------
test <- mash(data = studydata)
model_output <- test
model_output$singleCI %>%
select(-lowerCI, -upperCI) %>% spread(param, estimate) %>%
mutate(SingleLifespan = 1/gamma) %>%
gather(Param, estimate, B:SingleLifespan) %>%
group_by(Param) %>%
summarize(Median = median(estimate), SD = sd(estimate)) %>%
ungroup() %>%
mutate(Median = signif(Median, 3), SD = signif(SD, 3), Model = "Single phase") %>%
mutate(Param = ifelse(Param == "B", "Bhat", Param),
Param = ifelse(Param == "gamma", "gammahat", Param))
model_output$singleCI
library(mashr)
library(mashr)
rmarkdown::build_vignettes()
devtools::build_vignettes()
a <- c("a", "b")
a %in% c("a", "b")
all(a) %in% c("a", "b")
all(a %in% c("a", "b"))
library(mashr)
devtools::build_vignettes()
devtools::build_vignettes()
library(mashr)
devtools::build_vignettes()
devtools::build_vignettes()
available("tuskr")
available::available("tuskr", browse = FALSE)
available::available("catch", browse = FALSE)
available::available("cinch", browse = FALSE)
available::available("cinchr", browse = FALSE)
available::available("match", browse = FALSE)
available::available("matchr", browse = FALSE)
?match
?actg315raw
available::available("mashr")
devtools::document()
library(ushr)
rmardown::render("../BMC/Draft3/SI/AdditionalFile3.Rmd")
rmarkdown::render("../BMC/Draft3/SI/AdditionalFile3.Rmd")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::use_build_ignore(c("README.Rmd", "README.md", "HIV.bib", "README_files"))
library(ushr)
library(ushr)
available::available("ushr", browse = FALSE)
available::available("ushr", browse = FALSE)
available::available("ushr", browse = FALSE)
available::available("ushr", browse = FALSE)
?available
available::available("superSeq", browse = FALSE)
available::available("ushr", browse = FALSE)
available::available("ushr", browse = FALSE)
available::available("ushr", browse = FALSE)
?install_github
?devtools::install_github
devtools::build_vignettes()
library(ushr)
devtools::build_vignettes()
