mean_params = paramset[i,], mc.cores = ncores)
mclapply(1:nreps, simulate_studies, nsubjects, detection_threshold,
mean_params = paramset[i,], mc.cores = ncores)
library(mashr)
library(mashr)
library(mashr)
require(dplyr)
require(tidyr)
require(ggplot2)
require(mashr)
knitr::opts_chunk$set(echo = TRUE, fig.height = 6, fig.width = 8, message = FALSE, warning = FALSE)
print(head(actg315raw))
str(data)
str(actg315raw)
library(mashr)
actg315raw dplyr::%>%
#'     mutate(vl = 10^log10.RNA.) %>%
#'     select(id = Patid, time = Day, vl)
library(mashr)
?actg315raw
library(mashr)
?actg315raw
library(mashr)
simulate_data(nsubjects = 20)
?actg315raw
library(mashr)
library(mashr)
library(mashr)
library(mashr)
available::available("mimic")
?available
available::available("mime", browse = FALSE)
available::available("hame", browse = FALSE)
available::available("warmth", browse = FALSE)
available::available("charms", browse = FALSE)
available::available("waft", browse = FALSE)
available::available("tusk", browse = FALSE)
library(mashr)
?actg315raw
library(mashr)
?actg315raw
?actg315raw
library(mashr)
available::available("ask", browse = FALSE)
available::available("martha", browse = FALSE)
library(mashr)
library(mashr)
require(tidyverse)
require(readxl)
studydata <- read_excel("/Users/sineadmorris/Dropbox/Postdoc/HIVneonates/January19/Data/followup20190110.xlsx", na=".")
studydata <- studydata %>% select(id = studyid, vl = child_vl, time = age)
#detection_threshold = 20
censortime = 365
decline_buffer = 500
threshold_buffer = 10
VL_max_decline = 1e4
CI_max_diff = 1e3
n_min_single = 3
n_min_biphasic = 6
# forward_param_transform_fn = list(log, log, log, log)
# inv_param_transform_fn = list(exp, exp, exp, exp)
#
# initial_params = c(A = 10000, delta = 0.68, B = 1000, gamma = 0.03)
# searchmethod = "Nelder-Mead"
# metric = "ProfileLogLikelihood"
# weights = NULL
## Test with our data ---------------------------------
test <- mash(data = studydata)
model_output <- test
model_output$singleCI %>%
select(-lowerCI, -upperCI) %>% spread(param, estimate) %>%
mutate(SingleLifespan = 1/gamma) %>%
gather(Param, estimate, B:SingleLifespan) %>%
group_by(Param) %>%
summarize(Median = median(estimate), SD = sd(estimate)) %>%
ungroup() %>%
mutate(Median = signif(Median, 3), SD = signif(SD, 3), Model = "Single phase") %>%
mutate(Param = ifelse(Param == "B", "Bhat", Param),
Param = ifelse(Param == "gamma", "gammahat", Param))
model_output$singleCI
library(mashr)
library(mashr)
rmarkdown::build_vignettes()
devtools::build_vignettes()
a <- c("a", "b")
a %in% c("a", "b")
all(a) %in% c("a", "b")
all(a %in% c("a", "b"))
library(mashr)
devtools::build_vignettes()
devtools::build_vignettes()
library(mashr)
devtools::build_vignettes()
devtools::build_vignettes()
available("tuskr")
available::available("tuskr", browse = FALSE)
available::available("catch", browse = FALSE)
available::available("cinch", browse = FALSE)
available::available("cinchr", browse = FALSE)
available::available("match", browse = FALSE)
available::available("matchr", browse = FALSE)
?match
?actg315raw
available::available("mashr")
devtools::document()
library(ushr)
rmardown::render("../BMC/Draft3/SI/AdditionalFile3.Rmd")
rmarkdown::render("../BMC/Draft3/SI/AdditionalFile3.Rmd")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::use_build_ignore(c("README.Rmd", "README.md", "HIV.bib", "README_files"))
library(ushr)
library(ushr)
available::available("ushr", browse = FALSE)
available::available("ushr", browse = FALSE)
available::available("ushr", browse = FALSE)
available::available("ushr", browse = FALSE)
?available
available::available("superSeq", browse = FALSE)
available::available("ushr", browse = FALSE)
available::available("ushr", browse = FALSE)
available::available("ushr", browse = FALSE)
?install_github
?devtools::install_github
devtools::build_vignettes()
library(ushr)
devtools::build_vignettes()
library(ushr)
library(readr)
source('~/Dropbox/Postdoc/HIVneonates/BMC/revision/Rcode/fns_triphasic.R')
RAL <- read_csv("../Papers/Cardozo2017/RALdata.csv",
col_types = cols_only(ID = col_character(), Time = col_double(), log10VL = col_double())) %>%
mutate(vl = 10^log10VL) %>% select(id = ID, time = Time, vl)
## plot data ------------------------------------------------
plot_data(RAL, detection_threshold = 50)
data <- RAL
## triphasic ------------------------------------------------
## User-defined variables
filter = TRUE
detection_threshold = 50
censortime = 365
decline_buffer = 1e6
initial_buffer = 3
threshold_buffer = 10
VL_max_decline = 1e4
CI_max_diff = 1e3
n_min_single = 3
n_min_biphasic = 6
n_min_triphasic = 9
nsuppression = 1
#  Parameter tranformations for optimizer
forward_param_transform_fn = list(log, log, log, log, log, log)
inv_param_transform_fn = list(exp, exp, exp, exp, exp, exp)
## User defined fitting variables:
initial_params = c(A = 10000, delta = 1, B = 1000, gamma = 0.1, C = 100, omega = 0.03)
searchmethod = "Nelder-Mead"
if (!is.data.frame(data)) {
stop("Input 'data' must be a data frame")
}
if (!is.numeric(c(detection_threshold, censortime, decline_buffer, initial_buffer, n_min_triphasic,
threshold_buffer, VL_max_decline, CI_max_diff, nsuppression) )) {
stop("The following arguments must be numeric: detection_threshold, censortime, decline_buffer, initial_buffer,
n_min_triphasic, threshold_buffer, VL_max_decline, CI_max_diff, nsuppression")
}
if (floor(initial_buffer) != initial_buffer) {
initial_buffer <- floor(initial_buffer)
warning(paste0("initial_buffer must be a whole number: rounding down to ", floor(initial_buffer)))
}
## 1. Data processing  ----------------------------------------------------------------
if (filter) {
data_filtered <- filter_data(data, detection_threshold, censortime,
decline_buffer, initial_buffer, n_min_single = n_min_triphasic, threshold_buffer, nsuppression)
} else {
data_filtered <- data
}
# Number of subjects after filtering
id_filtered = unique(data_filtered$id)
if (length(id_filtered) == 0) {
stop("No subjects were suitable for model fitting after the data was filtered.")
}
# Get transformed parameters -----------------------------------------
transformed_params <- get_transformed_params(params = initial_params,
param_transform_fn = forward_param_transform_fn)
param_names <- names(initial_params)
# 2. Fit biphasic model ------------------------------------------
free_param_index <- c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)
triphasicmodel <- fit_model(data = data_filtered, id_vector = id_filtered, param_names = param_names,
initial_params = initial_params, free_param_index = free_param_index,
n_min_triphasic = n_min_triphasic, n_min_biphasic = n_min_biphasic,
model_list = "six", whichcurve = get_triphasic,
forward_param_transform_fn = forward_param_transform_fn,
inv_param_transform_fn = inv_param_transform_fn,
searchmethod = searchmethod)
if (nrow(triphasicmodel$fitted) > 0) {
triphasicCI <- get_CItable(triphasicmodel$CIlist, param_names, free_param_index, fitted = triphasicmodel$fitted)
# Flag subjects with unreliable CIs i.e. if at least one of the relative CI ranges is > CI_max_diff
badCI <- triphasicCI %>% filter(relativerange > CI_max_diff) %>% distinct(id)
triphasicCI <- triphasicCI %>% filter(!(id %in% badCI$id)) %>% select(id, param, estimate, lowerCI, upperCI)
if (nrow(triphasicCI) > 0) {
triphasicCI <- triphasicCI %>% group_by(id) %>% do(tri_switch_params(.)) %>% ungroup()
}
triphasic_fits <- bind_rows(triphasicmodel$model_fitlist) %>% filter(!(id %in% badCI$id))
} else {
triphasicCI <- data.frame()
badCI <- c()
triphasic_fits <- data.frame()
}
?filter_data
library(ushr)
source('~/Dropbox/Postdoc/HIVneonates/BMC/revision/Rcode/fns_triphasic.R')
RAL <- read_csv("../Papers/Cardozo2017/RALdata.csv",
col_types = cols_only(ID = col_character(), Time = col_double(), log10VL = col_double())) %>%
mutate(vl = 10^log10VL) %>% select(id = ID, time = Time, vl)
## plot data ------------------------------------------------
plot_data(RAL, detection_threshold = 50)
data <- RAL
## triphasic ------------------------------------------------
## User-defined variables
filter = TRUE
detection_threshold = 50
censortime = 365
decline_buffer = 1e6
initial_buffer = 3
threshold_buffer = 10
VL_max_decline = 1e4
CI_max_diff = 1e3
n_min_single = 3
n_min_biphasic = 6
n_min_triphasic = 9
nsuppression = 1
#  Parameter tranformations for optimizer
forward_param_transform_fn = list(log, log, log, log, log, log)
inv_param_transform_fn = list(exp, exp, exp, exp, exp, exp)
## User defined fitting variables:
initial_params = c(A = 10000, delta = 1, B = 1000, gamma = 0.1, C = 100, omega = 0.03)
searchmethod = "Nelder-Mead"
if (!is.data.frame(data)) {
stop("Input 'data' must be a data frame")
}
if (!is.numeric(c(detection_threshold, censortime, decline_buffer, initial_buffer, n_min_triphasic,
threshold_buffer, VL_max_decline, CI_max_diff, nsuppression) )) {
stop("The following arguments must be numeric: detection_threshold, censortime, decline_buffer, initial_buffer,
n_min_triphasic, threshold_buffer, VL_max_decline, CI_max_diff, nsuppression")
}
if (floor(initial_buffer) != initial_buffer) {
initial_buffer <- floor(initial_buffer)
warning(paste0("initial_buffer must be a whole number: rounding down to ", floor(initial_buffer)))
}
## 1. Data processing  ----------------------------------------------------------------
if (filter) {
data_filtered <- filter_data(data, detection_threshold, censortime,
decline_buffer, initial_buffer, n_min_single = n_min_triphasic, threshold_buffer, nsuppression)
} else {
data_filtered <- data
}
# Number of subjects after filtering
id_filtered = unique(data_filtered$id)
if (length(id_filtered) == 0) {
stop("No subjects were suitable for model fitting after the data was filtered.")
}
# Get transformed parameters -----------------------------------------
transformed_params <- get_transformed_params(params = initial_params,
param_transform_fn = forward_param_transform_fn)
param_names <- names(initial_params)
# 2. Fit biphasic model ------------------------------------------
free_param_index <- c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)
triphasicmodel <- fit_model(data = data_filtered, id_vector = id_filtered, param_names = param_names,
initial_params = initial_params, free_param_index = free_param_index,
n_min_triphasic = n_min_triphasic, n_min_biphasic = n_min_biphasic,
model_list = "six", whichcurve = get_triphasic,
forward_param_transform_fn = forward_param_transform_fn,
inv_param_transform_fn = inv_param_transform_fn,
searchmethod = searchmethod)
if (nrow(triphasicmodel$fitted) > 0) {
triphasicCI <- get_CItable(triphasicmodel$CIlist, param_names, free_param_index, fitted = triphasicmodel$fitted)
# Flag subjects with unreliable CIs i.e. if at least one of the relative CI ranges is > CI_max_diff
badCI <- triphasicCI %>% filter(relativerange > CI_max_diff) %>% distinct(id)
triphasicCI <- triphasicCI %>% filter(!(id %in% badCI$id)) %>% select(id, param, estimate, lowerCI, upperCI)
if (nrow(triphasicCI) > 0) {
triphasicCI <- triphasicCI %>% group_by(id) %>% do(tri_switch_params(.)) %>% ungroup()
}
triphasic_fits <- bind_rows(triphasicmodel$model_fitlist) %>% filter(!(id %in% badCI$id))
} else {
triphasicCI <- data.frame()
badCI <- c()
triphasic_fits <- data.frame()
}
library(readr)
RAL <- read_csv("../Papers/Cardozo2017/RALdata.csv",
col_types = cols_only(ID = col_character(), Time = col_double(), log10VL = col_double())) %>%
mutate(vl = 10^log10VL) %>% select(id = ID, time = Time, vl)
## plot data ------------------------------------------------
plot_data(RAL, detection_threshold = 50)
data <- RAL
## triphasic ------------------------------------------------
## User-defined variables
filter = TRUE
detection_threshold = 50
censortime = 365
decline_buffer = 1e6
initial_buffer = 3
threshold_buffer = 10
VL_max_decline = 1e4
CI_max_diff = 1e3
n_min_single = 3
n_min_biphasic = 6
n_min_triphasic = 9
nsuppression = 1
#  Parameter tranformations for optimizer
forward_param_transform_fn = list(log, log, log, log, log, log)
inv_param_transform_fn = list(exp, exp, exp, exp, exp, exp)
## User defined fitting variables:
initial_params = c(A = 10000, delta = 1, B = 1000, gamma = 0.1, C = 100, omega = 0.03)
searchmethod = "Nelder-Mead"
if (!is.data.frame(data)) {
stop("Input 'data' must be a data frame")
}
if (!is.numeric(c(detection_threshold, censortime, decline_buffer, initial_buffer, n_min_triphasic,
threshold_buffer, VL_max_decline, CI_max_diff, nsuppression) )) {
stop("The following arguments must be numeric: detection_threshold, censortime, decline_buffer, initial_buffer,
n_min_triphasic, threshold_buffer, VL_max_decline, CI_max_diff, nsuppression")
}
if (floor(initial_buffer) != initial_buffer) {
initial_buffer <- floor(initial_buffer)
warning(paste0("initial_buffer must be a whole number: rounding down to ", floor(initial_buffer)))
}
## 1. Data processing  ----------------------------------------------------------------
if (filter) {
data_filtered <- filter_data(data, detection_threshold, censortime,
decline_buffer, initial_buffer, n_min_single = n_min_triphasic, threshold_buffer, nsuppression)
} else {
data_filtered <- data
}
# Number of subjects after filtering
id_filtered = unique(data_filtered$id)
if (length(id_filtered) == 0) {
stop("No subjects were suitable for model fitting after the data was filtered.")
}
# Get transformed parameters -----------------------------------------
transformed_params <- get_transformed_params(params = initial_params,
param_transform_fn = forward_param_transform_fn)
param_names <- names(initial_params)
# 2. Fit biphasic model ------------------------------------------
free_param_index <- c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)
triphasicmodel <- fit_model(data = data_filtered, id_vector = id_filtered, param_names = param_names,
initial_params = initial_params, free_param_index = free_param_index,
n_min_triphasic = n_min_triphasic, n_min_biphasic = n_min_biphasic,
model_list = "six", whichcurve = get_triphasic,
forward_param_transform_fn = forward_param_transform_fn,
inv_param_transform_fn = inv_param_transform_fn,
searchmethod = searchmethod)
if (nrow(triphasicmodel$fitted) > 0) {
triphasicCI <- get_CItable(triphasicmodel$CIlist, param_names, free_param_index, fitted = triphasicmodel$fitted)
# Flag subjects with unreliable CIs i.e. if at least one of the relative CI ranges is > CI_max_diff
badCI <- triphasicCI %>% filter(relativerange > CI_max_diff) %>% distinct(id)
triphasicCI <- triphasicCI %>% filter(!(id %in% badCI$id)) %>% select(id, param, estimate, lowerCI, upperCI)
if (nrow(triphasicCI) > 0) {
triphasicCI <- triphasicCI %>% group_by(id) %>% do(tri_switch_params(.)) %>% ungroup()
}
triphasic_fits <- bind_rows(triphasicmodel$model_fitlist) %>% filter(!(id %in% badCI$id))
} else {
triphasicCI <- data.frame()
badCI <- c()
triphasic_fits <- data.frame()
}
RAL <- read_csv("/Users/sineadmorris/Dropbox/Postdoc/HIVneonates/BMC/revision/Papers/Cardozo2017/RALdata.csv",
col_types = cols_only(ID = col_character(), Time = col_double(), log10VL = col_double())) %>%
mutate(vl = 10^log10VL) %>% select(id = ID, time = Time, vl)
## plot data ------------------------------------------------
plot_data(RAL, detection_threshold = 50)
data <- RAL
## triphasic ------------------------------------------------
## User-defined variables
filter = TRUE
detection_threshold = 50
censortime = 365
decline_buffer = 1e6
initial_buffer = 3
threshold_buffer = 10
VL_max_decline = 1e4
CI_max_diff = 1e3
n_min_single = 3
n_min_biphasic = 6
n_min_triphasic = 9
nsuppression = 1
#  Parameter tranformations for optimizer
forward_param_transform_fn = list(log, log, log, log, log, log)
inv_param_transform_fn = list(exp, exp, exp, exp, exp, exp)
## User defined fitting variables:
initial_params = c(A = 10000, delta = 1, B = 1000, gamma = 0.1, C = 100, omega = 0.03)
searchmethod = "Nelder-Mead"
if (!is.data.frame(data)) {
stop("Input 'data' must be a data frame")
}
if (!is.numeric(c(detection_threshold, censortime, decline_buffer, initial_buffer, n_min_triphasic,
threshold_buffer, VL_max_decline, CI_max_diff, nsuppression) )) {
stop("The following arguments must be numeric: detection_threshold, censortime, decline_buffer, initial_buffer,
n_min_triphasic, threshold_buffer, VL_max_decline, CI_max_diff, nsuppression")
}
if (floor(initial_buffer) != initial_buffer) {
initial_buffer <- floor(initial_buffer)
warning(paste0("initial_buffer must be a whole number: rounding down to ", floor(initial_buffer)))
}
## 1. Data processing  ----------------------------------------------------------------
if (filter) {
data_filtered <- filter_data(data, detection_threshold, censortime,
decline_buffer, initial_buffer, n_min_single = n_min_triphasic, threshold_buffer, nsuppression)
} else {
data_filtered <- data
}
# Number of subjects after filtering
id_filtered = unique(data_filtered$id)
if (length(id_filtered) == 0) {
stop("No subjects were suitable for model fitting after the data was filtered.")
}
# Get transformed parameters -----------------------------------------
transformed_params <- get_transformed_params(params = initial_params,
param_transform_fn = forward_param_transform_fn)
param_names <- names(initial_params)
# 2. Fit biphasic model ------------------------------------------
free_param_index <- c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)
triphasicmodel <- fit_model(data = data_filtered, id_vector = id_filtered, param_names = param_names,
initial_params = initial_params, free_param_index = free_param_index,
n_min_triphasic = n_min_triphasic, n_min_biphasic = n_min_biphasic,
model_list = "six", whichcurve = get_triphasic,
forward_param_transform_fn = forward_param_transform_fn,
inv_param_transform_fn = inv_param_transform_fn,
searchmethod = searchmethod)
if (nrow(triphasicmodel$fitted) > 0) {
triphasicCI <- get_CItable(triphasicmodel$CIlist, param_names, free_param_index, fitted = triphasicmodel$fitted)
# Flag subjects with unreliable CIs i.e. if at least one of the relative CI ranges is > CI_max_diff
badCI <- triphasicCI %>% filter(relativerange > CI_max_diff) %>% distinct(id)
triphasicCI <- triphasicCI %>% filter(!(id %in% badCI$id)) %>% select(id, param, estimate, lowerCI, upperCI)
if (nrow(triphasicCI) > 0) {
triphasicCI <- triphasicCI %>% group_by(id) %>% do(tri_switch_params(.)) %>% ungroup()
}
triphasic_fits <- bind_rows(triphasicmodel$model_fitlist) %>% filter(!(id %in% badCI$id))
} else {
triphasicCI <- data.frame()
badCI <- c()
triphasic_fits <- data.frame()
}
transformed_params <- ushr:::get_transformed_params(params = initial_params,
param_transform_fn = forward_param_transform_fn)
param_names <- names(initial_params)
# 2. Fit biphasic model ------------------------------------------
free_param_index <- c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)
triphasicmodel <- fit_model(data = data_filtered, id_vector = id_filtered, param_names = param_names,
initial_params = initial_params, free_param_index = free_param_index,
n_min_triphasic = n_min_triphasic, n_min_biphasic = n_min_biphasic,
model_list = "six", whichcurve = get_triphasic,
forward_param_transform_fn = forward_param_transform_fn,
inv_param_transform_fn = inv_param_transform_fn,
searchmethod = searchmethod)
source('~/Dropbox/Postdoc/HIVneonates/BMC/revision/Rcode/fns_triphasic.R')
triphasicmodel <- fit_model(data = data_filtered, id_vector = id_filtered, param_names = param_names,
initial_params = initial_params, free_param_index = free_param_index,
n_min_triphasic = n_min_triphasic, n_min_biphasic = n_min_biphasic,
model_list = "six", whichcurve = get_triphasic,
forward_param_transform_fn = forward_param_transform_fn,
inv_param_transform_fn = inv_param_transform_fn,
searchmethod = searchmethod)
source('~/Dropbox/Postdoc/HIVneonates/BMC/revision/Rcode/fns_triphasic.R')
triphasicmodel <- fit_model(data = data_filtered, id_vector = id_filtered, param_names = param_names,
initial_params = initial_params, free_param_index = free_param_index,
n_min_triphasic = n_min_triphasic, n_min_biphasic = n_min_biphasic,
model_list = "six", whichcurve = get_triphasic,
forward_param_transform_fn = forward_param_transform_fn,
inv_param_transform_fn = inv_param_transform_fn,
searchmethod = searchmethod)
source('~/Dropbox/Postdoc/HIVneonates/BMC/revision/Rcode/fns_triphasic.R')
?get_error
get_error
param_names
free_param_index
a <- matrix(a, 1)
class(a)
try({a <- matrix(a, 1)})
class(a)
b <- try( matrix(a, 1))
class(b)
class(b)[1]
"try-error" %in% \class(b)
c("try-error") %in% \class(b)
c("try-error") %in% class(b)
"try-error" %in% class(b)
is(b, "try-error")
inherits(b, "try-error")
devtools::build_win()
devtools::build_win_devel()
?devtools::build_win
devtools::build_win(version = 'R-devel')
library(ushr)
library(ushr)
library(ushr)
library(ushr)
library(ushr)
library(ushr)
rmarkdown::pandoc_version()
library(ushr)
median(0.73 + 0.18 + 4e-5)
median(0.68 + 0.1)
median(0.18 + 4e-5)
mean(0.18 + 4e-5)
mean(0.68 + 0.1)
mean(0.73 + 0.18 + 4e-5)
t <- seq(1:40, length.out = 1000)
t <- seq(1, 40, length.out = 1000)
plot(t, exp(-0.91 * t))
points(t, exp(-0.78 * t))
points(t, exp(-0.18 * t))
points(t, exp(-0.1 * t))
